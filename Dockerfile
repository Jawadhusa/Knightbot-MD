# استخدم صورة Node.js رسمية كقاعدة.
# بناءً على "engines": { "node": ">=18.0.0" }، يمكننا اختيار إصدار حديث.
# "alpine" يوفر صورة أصغر وأكثر أمانًا.
FROM node:20-alpine

# تعيين دليل العمل داخل الحاوية.
# هذا هو المكان الذي سيتم فيه نسخ ملفات تطبيقك وتشغيل الأوامر.
WORKDIR /app

# انسخ ملف package.json.
# هذه الخطوة مفصولة للسماح لـ Docker بتخزين (caching) طبقة تثبيت التبعيات
# إذا لم يتغير package.json، فلن يتم إعادة تشغيل npm install.
COPY package.json ./

# **ملاحظة مهمة:** بما أنك طلبت عدم استخدام ملف قفل، فإن npm install
# سيقوم بإنشاء package-lock.json داخل الحاوية أثناء هذه العملية.
# إذا كنت لا تريد أن يتم إنشاء ملف قفل على الإطلاق (وهو أمر نادر)،
# فستحتاج إلى استخدام npm ci إذا كان لديك package-lock.json بالفعل،
# ولكن هدفنا هنا هو تجاوزه.
RUN npm install --production

# `--production` سيضمن تثبيت التبعيات الإنتاجية فقط، مما يقلل من حجم الصورة.
# إذا كنت بحاجة إلى تبعيات التطوير في الحاوية (وهو غير شائع للإنتاج)، فاحذف `--production`.

# انسخ بقية كود التطبيق إلى دليل العمل.
COPY . .

# كشف المنفذ الذي يستمع إليه تطبيقك.
# إذا كان تطبيقك يستمع على منفذ آخر غير 3000، فقم بتغييره هنا.
EXPOSE 3000

# أمر بدء تشغيل التطبيق عند تشغيل الحاوية.
# بناءً على "scripts": { "start": "node index.js" }
CMD [ "npm", "start" ]

# نصائح إضافية:
# - إذا كان تطبيقك يستخدم متغيرات بيئة (Environment Variables)،
#   تأكد من إعدادها عند نشر الحاوية في Koyeb أو المنصة التي تستخدمها.
#   مثال: `docker run -e SESSION_ID=your_session_id knightbot`
#   أو عبر واجهة المستخدم في Koyeb.
